# -*- coding: utf-8 -*-
from datetime import datetime, timedelta, time, UTC
import msgpack
import httpx
from redis import Redis

from app.my_redis_client import get_redis
import asyncio

tfromiso = time.fromisoformat
fromiso = datetime.fromisoformat

class ForecastAPI:
    def __init__(self):
        self.uvi_url = "https://currentuvindex.com/api/v1/uvi"
        self.weather_url = "https://api.open-meteo.com/v1/forecast"
        self.weather_vars = ("temperature_2m", "relative_humidity_2m", "precipitation", "precipitation_probability",
                             "cloud_cover", "surface_pressure", "wind_speed_10m",
                             "wind_direction_10m"
                             )
        self.weather_units = {"": "", 'üå°': '¬∞C | ', 'üíß': '%\n', '‚òîÔ∏è': '–º–º | ', '‚òîÔ∏èÔºÖ': '% | ',
                               '‚òÅÔ∏è': '%\n', '‚è≤Ô∏è': '–≥–ü–∞ | ',
                               'üí®': '–∫–º/—á | ', 'üí®‚ÜóÔ∏è': '¬∞'
                             }
        self.weather_keys = tuple(self.weather_units.keys())[1:-1]
        self.advices = (
            ((-15, 0.001, 15, 25), ("–°–∏–ª—å–Ω—ã–π –º–æ—Ä–æ–∑! –¢–µ—Ä–º–æ–±–µ–ª—å—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.", "–•–æ–ª–æ–¥–Ω–æ. –ù–∞–¥–µ–Ω—å—Ç–µ –ø—É—Ö–æ–≤–∏–∫ –∏ —à–∞–ø–∫—É.", "–ü—Ä–æ—Ö–ª–∞–¥–Ω–æ. –õ–µ–≥–∫–∞—è –∫—É—Ä—Ç–∫–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç.", "–ò–¥–µ–∞–ª—å–Ω–æ! —Ñ—É—Ç–±–æ–ª–∫–∞ - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä.", "–ñ–∞—Ä–∫–æ! –ù–∞–¥–µ–Ω—å—Ç–µ –ª—ë–≥–∫—É—é –æ–¥–µ–∂–¥—É –∏ –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä.")),
            ((30, 60), ("–°—É—Ö–æ–π –≤–æ–∑–¥—É—Ö. –ü–µ–π—Ç–µ –±–æ–ª—å—à–µ –≤–æ–¥—ã.", "–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å.", "–í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å. –û–¥–µ–∂–¥–∞ –∏–∑ –¥—ã—à–∞—â–∏—Ö —Ç–∫–∞–Ω–µ–π.")),
            ((0.001, 2, 10),("–ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤ - –º–æ–∂–Ω–æ –±–µ–∑ –∑–æ–Ω—Ç–∞.", "–õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å. –í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç.", "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å. –ù–µ–ø—Ä–æ–º–æ–∫–∞–µ–º–∞—è –æ–±—É–≤—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞.", "–õ–∏–≤–µ–Ω—å! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞.")),
            ((20, 50, 80), ("–î–æ–∂–¥—å –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω.", "–í–æ–∑–º–æ–∂–µ–Ω –¥–æ–∂–¥—å. –ò–º–µ–π—Ç–µ –∑–æ–Ω—Ç –ø–æ–¥ —Ä—É–∫–æ–π.", "–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è.", "–¢–æ—á–Ω–æ –±—É–¥–µ—Ç –¥–æ–∂–¥—å! –û–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–æ–∂–¥–µ–≤–∏–∫.")),
            ((20, 70), ("–Ø—Å–Ω–æ. –°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.", "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å.", "–ü–∞—Å–º—É—Ä–Ω–æ. –•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è –º—É–∑–µ–µ–≤.")),
            ((990, 1020), ("–ù–∏–∑–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–∞ –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å.", "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ.", "–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ. –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!")),
            ((5, 10, 15), ("–®—Ç–∏–ª—å. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–∏–∫–Ω–∏–∫–∞.", "–õ—ë–≥–∫–∏–π –≤–µ—Ç–µ—Ä. –ö—É—Ä—Ç–∫–∞ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç.", "–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä. –ó–∞–∫—Ä–µ–ø–∏—Ç–µ –Ω–µ–∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã.", "–®—Ç–æ—Ä–º! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –Ω–∞ —É–ª–∏—Ü–µ."))
        )

    async def get_external_data(self, latitude: float, longitude: float) -> tuple[list, dict]:
        forecast_url_params = {'latitude': latitude, 'longitude': longitude, 'hourly': self.weather_vars}
        async with httpx.AsyncClient(timeout=60) as client:
            forecast_uvi = await client.get(self.uvi_url, params=forecast_url_params)
            forecast_weather = await client.get(self.weather_url, params=forecast_url_params)

        forecast_uvi: list = forecast_uvi.json()['forecast']  # [{'time': '2025-07-22T17:00:00Z', 'uvi': 0}, ...]
        forecast_weather.encoding = 'cp1251'
        forecast_weather: dict[str, list] = forecast_weather.json()['hourly']  # {"time": ["2025-07-22T00:00", ...], "temperature_2m": [16.7, ...], ...}
        return forecast_uvi, forecast_weather

    async def get_forecast(self, latitude: float, longitude: float, forecast_range: str, current_hour: int, analysis_mark = False):
        r = await get_redis()
        redis_key = f'{str(latitude)}-{str(longitude)}-{str(forecast_range)}-{str(current_hour)}'

        if cached_uvi := await r.get(f"{redis_key}:list"):
            cached_weather = await r.get(f"{redis_key}:dict")
            forecast_weather = msgpack.unpackb(cached_weather, raw=False)
            forecast_uvi = msgpack.unpackb(cached_uvi, raw=False)
        else:
            forecast_uvi, forecast_weather = await self.get_external_data(latitude, longitude)
            seconds_till_next_hour: int = (60 - datetime.now(UTC).minute) * 60
            await r.setex(name=f"{redis_key}:dict", value=msgpack.packb(forecast_weather), time=seconds_till_next_hour)
            await r.setex(name=f"{redis_key}:list", value=msgpack.packb(forecast_uvi), time=seconds_till_next_hour)


        ranges = {'–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è': 0, '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞': 1}
        # –î–ª—è "–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è" –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –Ω–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ —Ä–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è –∏–∑ –æ–±–æ–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        # –£ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–∑–∂–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–æ—ç—Ç–æ–º—É –±–µ—Ä—ë–º –µ–≥–æ —Ä–∞–Ω–Ω–µ–µ –≤—Ä–µ–º—è
        earliest_uvi_hour = fromiso(forecast_uvi[0]['time'][:-1])
        forecast_day = timedelta(days=ranges[forecast_range]) #
        start_point: datetime = earliest_uvi_hour + forecast_day
        if forecast_range == '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞': # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª—É–Ω–æ—á–∏
            start_point: datetime = start_point.replace(hour=0)

        end_point: datetime = start_point + timedelta(days=1, hours=-start_point.hour)

        start_point: int = list(map(lambda x: fromiso(x), forecast_weather['time'])).index(start_point)
        end_point: int = list(map(lambda x: fromiso(x), forecast_weather['time'])).index(end_point)

        forecast_weather = list(map(lambda x: x[start_point:end_point], forecast_weather.values()))

        if analysis_mark:
            forecast = await self.analyze_forecast(forecast_weather)
        else:
            forecast = await self.build_full_forecast(forecast_weather, forecast_uvi, r, redis_key)
        return forecast

    async def build_full_forecast(self, forecast_raw_data: list, uvi_data: list, r: Redis, redis_key: str) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –æ—Ç–æ–±—Ä–∞–∂–∞—é—â—É—é –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Å"""
        for_return = ''
        forecast_len = len(forecast_raw_data[0]) # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ

        for num in range(forecast_len):
            for value, units in zip(forecast_raw_data, self.weather_units):
                val_raw = value[num]
                uvi = uvi_data[num]

                if isinstance(val_raw, str):
                    if fromiso(val_raw).timetuple().tm_hour == 0 or num == 0:
                        for_return += f"üìÖ{fromiso(val_raw).date()}\n{len(val_raw) * '_'}\n\n"
                    for_return += f"{val_raw[val_raw.index('T')+1:]} - "
                    if fromiso(val_raw) == fromiso(uvi['time'][:-1]):
                        for_return += f"‚òÄÔ∏èUV {uvi['uvi']} | "
                else:
                    unit = f"{units}" if units else ""
                    for_return += f"{unit} {val_raw} {self.weather_units[unit.strip(' :')]}"

            for_return += '\n\n'

        seconds_till_next_hour: int = (60 - datetime.now(UTC).minute) * 60
        await r.setex(redis_key, seconds_till_next_hour, for_return)
        return for_return

    async def analyze_forecast(self, forecast: list) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∞ —Ç–∞–∫–∂–µ –≤—Å–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        analysis = '\n\n–û—Å–Ω–æ–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—Ä–æ–≥–Ω–æ–∑—É:\n'
        advices = ''
        for value, value_name, advice in zip(forecast[1:-1], self.weather_keys, self.advices):
            value_mark = self.weather_units[value_name.strip(': ')].strip('\n')
            max_val, min_val = max(value), min(value)
            max_val_ind, min_val_ind = value.index(max_val), value.index(min_val)
            max_val_time, min_val_time = forecast[0][max_val_ind], forecast[0][min_val_ind]
            max_val_time, min_val_time = max_val_time[max_val_time.index('T')+1:], min_val_time[min_val_time.index('T')+1:]
            analysis += f'max {value_name} - {max_val}{value_mark}({max_val_time})\n'
            analysis += f'min {value_name} - {min_val}{value_mark}({min_val_time})\n\n'
            for boundary, advice_text in zip(advice[0], advice[1]):
                if max_val < boundary:
                    advices += advice_text
                    break
            else:
                advices += advice[-1][-1]
        for_return = analysis + advices
        return for_return

forecast = ForecastAPI()
